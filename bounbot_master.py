# -*- coding: utf-8 -*-
"""BOUNbot_Master.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZfkOiWvYPzIcYpsujxIIkIOk6ZANgiGz
"""

#INSTALLATIONS
#!pip install dialogflow
#!pip install google-api-core

#LIBRARY IMPORTS
import os #df api
import re
import dialogflow_v2 as dialogflow #df api
from google.api_core.exceptions import InvalidArgument #df api
from nltk.parse.generate import generate #nltk import
from nltk import CFG #cfg import
from IPython import display #image display

#DIALOGFLOW API PULL INTENT FUNCTION
def pull_Intent(user_input) -> str:
  """ """
  os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = 'private_key.json'

  DIALOGFLOW_PROJECT_ID = 'hell-bot-aqot'
  DIALOGFLOW_LANGUAGE_CODE = 'tr'
  SESSION_ID = 'me'

  text_to_be_analyzed = user_input

  session_client = dialogflow.SessionsClient()
  session = session_client.session_path(DIALOGFLOW_PROJECT_ID, SESSION_ID)
  text_input = dialogflow.types.TextInput(text=text_to_be_analyzed, language_code=DIALOGFLOW_LANGUAGE_CODE)
  query_input = dialogflow.types.QueryInput(text=text_input)
  try:
      response = session_client.detect_intent(session=session, query_input=query_input)
  except InvalidArgument:
      raise

  return response.query_result.intent.display_name, response.query_result.parameters.fields.values ##entity return etme

#TESTING IF FUNCTION RETURNS INTENT
#classified_intent = pull_Intent(user_input)[0]
#print(classified_intent)

#TESTING IF FUNCTION RETURNS ENTITY
#entity_value = pull_Intent(user_input)[1]
#print(entity_value)

#LOCATION ANSWERS
chat_loc=  [
                  [        r"hey|selam|naber|hop",        ["naber!", "selam!",]    ],   
                  [        r"adın ne?|isim ver",        ["ben BOUN.bot! :)",]    ],     
                  [        r"nasılsın ?",        ["iyi sen?",]    ],   
                  [        r"(.*\s?(GKM)|(gkm)|.*\s?(garanti)\s?(kültür)?\s?(merkezi)?)",        ["Gkm'ye buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/77" ,]            ],  
                [        r"(.*\s?(NH)|(nh)|.*\s?(new)\s?(hall)?|.*\s?(yeni)\s?(bina)?)",        ["New Hall'e buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/67 ",]    ],     
                  [        r"(.*\s?(EF)|(ef)|.*\s?(egitim)\s?(fakultesi)?\s?(fak)?)",        ["Eğitim Fakültesi'ne buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/59",]    ], 
                [        r"(.*\s?(KYD)|(kyd)|.*\s?(yadyok)\s?(kuzey)?\s?(eski)?)",        ["Kuzey YADYOK'a buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/58",]    ],     
                  [        r"(.*\s?(KB)|(kb)|.*\s?(kare)\s?(blok)?|.*\s?(fen)\s(ve)?\s?(muh)?)",        ["Kare Blok'a buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/7",]    ], 
                [        r"(.*\s?(IB)|(ib)|.*\s?(isletme)\s?(binası)?|.*\s?(washburn)\s?(hall)?)",        ["İktisadi ve İdari Bilimler Fakültesi'ne buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/29",]    ],     
                  [        r"(.*\s?(JF)|(jf)|.*\s?(john)\s?(freely)?\s?(hall)?)",        ["John Freely Binası'na buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/28",]    ], 
                [        r"(.*\s?(NB)|(nb)|.*\s?(natuk)\s?(birkan)?)",        ["Natuk Birkan Binası'na buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/31",]    ],      
                [        r"(.*\s?(SH)|(sh)|.*\s?(sloane)\s?(hall)?|.*\s?(psikoloji)\s?(binas)?|.*\s?(sosyoloji)\s?(binas)?)",        ["Sloane Hall'a buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/35",]    ],     
                   [        r"(.*\s?(muhendislik)|(muhendislik)|.*\s?(perkins)\s?(hall)?)",        ["Mühendislik Fakültesi'ne buradan gidebilirisiniz: https://harita.boun.edu.tr/goster/1",]    ],          
                  [        r"(.*\s?(TB)|(tb)|.*\s?(anderson)\s?(hall)?|.*\s?(fen)\s?(edebiyat)?\s?(edb)?)",        ["Fen-Edebiyat Fakültesi'ne buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/9",]    ], 
                [        r"(.*\s?(BM)|(bm)|.*\s?(bilgisayar)\s?(binası)?)",        ["Bilgisayar Mühendisliği Binası'na buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/62",]    ],     
                  [        r"(.*\s?(ET)|(et)|.*\s?(eta))",        ["ETA B-Blok'a buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/63",]    ], 
                [        r"(.*\s?(KP)|(kp)|.*\s?(kuzey)\s?(park)?)",        ["Kuzey Park Binası'na buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/64",]    ],      
                [        r"(.*\s?(YYD)|(yyd)|.*\s?(yeni)\s(yadyok)?|.*\s?(yadyok1))",        ["Yeni YADYOK'a buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/122",]    ],
                [        r"(.*\s?(BIM)|(bim)|.*\s?(bilgi)\s?(islem)?)",        ["Bilgi İşlem Merkezi'ne buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/2",]    ],    
                  [        r"(.*\s?(HST)|(hst)|.*\s?(hisar)\s?(spor)?|.*\s?(hisar)\s?(havuz)?)",        ["Hisar Spor Tesisleri'ne buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/14",]    ], 
                [        r"(.*\s?(Hisar)|(hisar))",        ["Hisar Kampüs'e buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/118",]    ],     
                  [        r"(.*\s?(kuzey)\s(yemek)?)",        ["Kuzey Yemekhaneye buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/162",]    ], 
                [        r"(.*\s?(kutup)|(kütüp)|.*\s?(aptullah))",        ["Aptullah Kuran Kütüphanesi'ne buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/8",]    ],      
                [        r"(.*\s?(1)|.*\s?(birinci))",        ["I. Kuzey Yurdu'na buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/61",]    ],
            [        r"(.*\s?(2)|.*\s?(ikinci))",        ["II. Kuzey Yurdu'na buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/61",]    ],      
                [        r"(.*\s?(3)|.*\s?(ucuncu))",        ["III. Kuzey Yurdu'na buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/66",]    ],
                 [        r"(.*\s?(4)|.*\s?(dorduncu))",        ["IV. Kuzey Yurdu'na buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/90",]    ], 
                [        r".*\s?(erkek)",        ["I. Erkek Yurdu'na buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/32",]    ],     
                  [        r".*\s?(kiz)",        ["I. Kız Yurdu'na buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/23",]    ], 
                [        r".*\s?(guney)\s(yemek)?",        ["Güney Yemekhaneye buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/165",]    ],     
                  [        r"(.*\s?(ogrenci)\s?(isleri)?)",        ["Öğrenci İşleri Binası'na buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/30",]    ], 
                [        r"(.*\s?(ofb)|.*\s?(OFB)|.*\s?(faaliyet))",        ["Öğrenci Faaliyetleri Binası'na buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/22",]    ],      
                [        r"(.*\s?(petekler)|.*\s?(petek))",        ["Peteklere buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/127",]    ],
                  [        r".*\s?(manzara)",        ["Manzaraya buradan gidebilirsiniz: https://harita.boun.edu.tr/goster/132",]    ]
                
               
             ]

#LOCATION FUNCTION
def loc_Answer(str):
   fg = [(re.compile(x, re.IGNORECASE),y) for (x,y) in chat_loc]
   for (pattern, response) in fg:
     match = pattern.match(str)
     if match:
       resp = response[0]
      # if resp[-2:] == '?.': resp = resp[:-2] + '.'
       #if resp[-2:] == '??': resp = resp[:-2] + '?'
       print(resp)

#FUNCTION TEST
#(.*\s(GKM)|(gkm)|(garanti)\s?(kültür)?\s?(merkezi)?)
#loc_Answer("nere bu ERKEK yurdu")

#INFO ANSWERS
chat_info=  [
                  [        r"(.*\s?(over)|.*\s?(under))",        ["overload ya da underload olmak için...",]    ],   
                  [        r"(.*\s?(misafir)|.*\s?(Misafir))",        ["Covid-19 sürecince ne yazık ki kampüse misafir sokamazsın :(",]    ],     
                  [        r"(.*\s?(regi)|.*\s?(registration))",        ["Registration'a öğrenci numaranı ve şifreni yazarak giriş yapabilirsin. Registration üzerinden ders seçim döneminde 'Course List Preparation' kısmından ders programını oluşturabilirsin. Ayrıca dilekçe yazman gerekirse yine buradaki 'E-Petitions' kısmından dilekçeni yazabilirsin. ",]    ],   
                  [        r".*\s?(kitap)|.*\s?(kutuphane)|.*\s?(kütüphane)",        ["Kütüphaneden kitap almak için öğrenci kimlik kartına ihtiyacın var. Kimlik kartınla birlikte almak istediğin kitabı kütüphane görevlisine götürdüğünde kaydın yapılacaktır.",]            ],  
                [        r".*\s?(yemekhane)|.*\s?(yemek).*\s?(saat)?",        ["""Yemekhane kartına herhangi bir Garanti Bankası ATM'si üzerinden para yükleyebilirsin. Ayrıca eğer Garanti Bankası'nda hesabın mevcutsa Mobil uygulamayı kullanıp kartına rahatlıkla telefonundan para yüklemen de mümkün.
                yemekhane saatleri şöyledir: 
                Kahvaltı: 7-9
                Öğle yemeği: 12-14
                Akşam yemeği: 17-20 """,]    ],     
                  [        r"(.*\s?(trans)|.*\s?(transkript))",        ["Transkriptini almadan önce registration üzerinden talep oluşturman gerekiyor. Talebini oluşturduktan 1-2 gün sonra Genel İdare Binası'nda bulunan Öğrenci İşleri Ofisi'ne giderek transkriptini alabilirsin. Alternatif olarak E-devlet üzerinden de transkriptini alman mümkün. :)",]    ], 
                [        r"(.*\s?(ders)|.*\s?(secim))",        ["Ders seçimini ders seçim döneminde registration üzerinden 'Course List Preparation' kısmından yapabilirsin. Eğer öncesinde programını planlamak istiyorsan yine registrationdaki 'Course List Planner'ı kullanabilirsin. ",]    ],     
                  [        r".*\s?(shuttle)",        ["Shuttle kampüsler arası ulaşım için verilen ücretsiz taşıma hizmetidir, genellikle shuttlelar minibüstür. Shuttle saatleri şu an güncellenmektedir ancak normal şartlarda registration giriş bilgilerinizle şu adresten takip edebilirsiniz: https://mekik.boun.edu.tr/",]    ], 
                [        r"(.*\s?(sabah)|.*\s?(sabahlamak))",        ["Kampüste sabahlamak istiyorsan 7/24 açık olduğu için kütüphaneyi tercih edebilirsin.",]    ],     
                  [        r"(.*\s?(cap)|.*\s?(yandal))",        ["Çift Anadal Programlarına bu linki takip ederek ulaşabilirsin: http://www.boun.edu.tr/tr-TR/Content/Akademik/Cift_Anadal_Programlari. Ayrıca eğer ÇAP Yönergesine ulaşmak istiyorsan o da bu linkte: http://www.boun.edu.tr/tr_TR/Content/Ogrenciler/Ogrenci_Isleri/Yonetmelik_ve_Ic_Tuzukler/Cift_Anadal_Programlari_Yonergesi. Son olarak bu linkten de ÇAP ve Yandal programlarıyla ilgili genel bilgi alabilirsin: http://adaylar.boun.edu.tr/.",]    ], 
                [        r"(.*\s?(withdraw)|.*\s?(cekilme))",        ["Withdrawal kısaca dersten çekilme anlamına gelmektedir. Her lisans öğrencisinin öğrenimi boyunca en fazla üç kez dersten çekilme hakkı vardır. Dersten çekilme dönemi son ders gününden beş hafta önce başlar ve bir hafta sürer. Dersten çekilmek için danışmanın onayı gerekmektedir. Dersten çekilmek için belirlenen tarihte registrationda bulunan 'Course List Preparation' kısmından dersin bırakılması gerekmektedir. ",]    ],
                [        r".*\s?(consent)",        ["Ders seçim döneminde bazı derslere kayıt olmak için dersi veren öğretim görevlisinden izin almak gerekmektedir. Consent atmak aslında dersi veren kişiden dersi alabilmek için izin istemektir. Dersi programına eklemeden önce dersi veren öğretim görevlisine ortalama 400 karakterlik bir mesaj gönderilir. Eğer consent isteği onaylanırsa ders programa eklenebilir.",]    ],      
                ]

#INFO FUNCTION
def info_Answer(str):
   fg = [(re.compile(x, re.IGNORECASE),y) for (x,y) in chat_info]
   for (pattern, response) in fg:
     match = pattern.match(str)
     if match:
       resp = response[0]
      # if resp[-2:] == '?.': resp = resp[:-2] + '.'
       #if resp[-2:] == '??': resp = resp[:-2] + '?'
       print(resp)

chat_clubs=  [
                  [        r"(.*\s?(adk)|.*\s?(Ataturk))",        ["Atatürkçü Düşünce Kulübü'nün sitesi http://buadk.boun.edu.tr/ numarası (0212) 359 69 95 ve mail adresi adk@boun.edu.tr bu kulübün yeri 1. Erkek Yurdu altıdır",]    ],   
                  [        r"(.*\s?(bubk)|.*\s?(bilim))",        ["Bilim Kulübü'nün sitesi http://www.bilimkulubu.boun.edu.tr numarası (0212) 359 71 54 ve mail adresi bilimkulubu@boun.edu.tr dir. Bu kulüp New Hall Binası girişindedir.",]    ],     
                  [        r"(.*\s?(compec)|.*\s?(bilisim))",        ["Bilişim Kulübü'nün sitesi https://compec.org, numarası (0212) 359 44 61- 179 ve mail adresi compec@boun.edu.tr dir. Bu kulüp 1. Erkek Yurdu altında bulunmaktadır.",]    ],   
                  [        r".*\s?(bric)",        ["Briç Kulübü'nün sitesi http://www.bric.boun.edu.tr, numarası (0212) 359 44 61- 175 ve mail adresi bric@boun.edu.tr dir. Bu kulüp 1. Erkek Yurdu altında bulunmaktadır.",]            ],  
                [        r"(.*\s?(bucev)|.*\s?(ceviri))",        ["Çeviri Kulübü'nün sitesi http://www.bucev.boun.edu.tr, numarası (0212) 359 44 61- 173 ve mail adresi bucev@boun.edu.tr dir. Bu kulüp New Hall Binası girişinde bulunmaktadır.",]    ],     
                  [        r"(.*\s?(bucek)|.*\s?(cevre))",        ["Çevre Kulübü'nün sitesi http://www.bucek.boun.edu.tr, numarası (0212) 359 69 95 ve mail adresi bucev@boun.edu.tr dir. Bu kulüp 1. Erkek Yurdu altında bulunmaktadır.",]    ], 
                [        r"(.*\s?(budak)|.*\s?(dagcilik))",        ["Dağcılık Kulübü'nün sitesi http://www.budak.boun.edu.tr, numarası (0212) 359 44 61- 175 ve mail adresi budak@boun.edu.tr dir. Bu kulüp 1. Erkek Yurdu altında bulunmaktadır.",]    ],     
                  [        r"(.*\s?(budans)|.*\s?(dans))",        ["Dans Kulübü'nün sitesi http://budans.boun.edu.tr, mail adresi budans@boun.edu.tr dir. Bu kulüp Güney Öğrenci Otopark PARK-1'de bulunmaktadır.",]    ], 
                [        r"(.*\s?(budav)|.*\s?(davranis))",        ["Davranış Bilimleri Kulübü'nün sitesi http://www.budav.boun.edu.tr dir.",]    ],     
                  [        r"(.*\s?(buyelken)|.*\s?(deniz)|.*\s?(yelken))",        ["Denizcilik ve Yelkencilik Kulübü'nün sitesi http://yelken.boun.edu.tr dir.",]    ], 
                [        r"(.*\s?(bued)|.*\s?(edebiyat))",        ["Edebiyat Kulübü'nün sitesi http://www.bued.boun.edu.tr, numarası (0212) 359 64 73 ve mail adresi bued@boun.edu.tr dir. Bu kulüp 1. Erkek Yurdu altında bulunmaktadır.",]    ],
                [        r"(.*\s?(erec)|.*\s?(egitim))",        ["Eğitim Araştırma Kulübü'nün sitesi http://www.erec.boun.edu.tr, numarası (0212) 359 65 43 ve mail adresi erec@boun.edu.tr dir. Bu kulüp New Hall Binası girişinde bulunmaktadır.",]    ],     
                     [        r"(.*\s?(buec)|.*\s?(elektro))",        ["Elektro Teknoloji Kulübü'nün sitesi http://www.buec.boun.edu.tr, numarası (0212) 359 68 97ve mail adresi buec@boun.edu.tr dir. Bu kulüp New Hall Binası girişinde bulunmaktadır.",]    ], 
                [        r"(.*\s?(bufk)|.*\s?(folklor))",        ["Folklor Kulübü'nün sitesi http://www.bufk.boun.edu.tr, numarası (0212) 359 65 67 ve mail adresi bufk@boun.edu.tr dir. Bu kulüp 1. Erkek Yurdu altında bulunmaktadır.",]    ],     
                  [        r"(.*\s?(bufok)|.*\s?(fotograf))",        ["Fotoğrafçılık Kulübü'nün sitesi http://www.bufok.boun.edu.tr, numarası (0212) 359 72 01 ve mail adresi bufok@boun.edu.tr dir. Bu kulüp 1. Erkek Yurdu altında bulunmaktadır.",]    ], 
                [        r"(.*\s?(bugusto)|.*\s?(gastronomi))",        ["Gastronomi ve Degutasyon Kulübü'nün sitesi http://www.bugusto.boun.edu.tr dır.",]    ],     
                  [        r"(.*\s?(buok)|.*\s?(macera))",        ["Gerçek Macera Oyunları Kulubü'nün sitesi http://buok.boun.edu.tr, numarası (0212) 359 44 61-175 ve mail adresi buok@boun.edu.tr dir. Bu kulüp 1. Erkek Yurdu altında bulunmaktadır.",]    ], 
                [        r"(.*\s?(gsk)|.*\s?(sanat))",        ["Güzel Sanatlar Kulubü'nün sitesi http://www.gsk.boun.edu.tr/hosgeldiniz.html, mail adresi gsk@boun.edu.tr dir. Bu kulüp 1. Erkek Yurdu altında bulunmaktadır.",]    ],
                [        r"(.*\s?(buhak)|.*\s?(havacilik))",        ["Havacılık Kulübü'nün sitesi http://www.buhak.boun.edu.tr, numarası (0212) 359 44 61- 177 ve mail adresi buhak@boun.edu.tr dir. Bu kulüp 1. Erkek Yurdu altında bulunmaktadır.",]    ],     
                 [        r"(.*\s?(buik)|.*\s?(isletme))",        ["İşletme ve Ekonomi Kulübü'nün sitesi http://www.buik.boun.edu.tr, numarası (0212) 359 68 14 ve mail adresi buık@boun.edu.tr dir. Bu kulüp İİBF Binası altında bulunmaktadır.",]    ],     
                     [        r"(.*\s?(bukak)|.*\s?(kadin))",        ["Kadın Araştırma Kulübü'nün sitesi http://www.bukak.boun.edu.tr, numarası (0212) 359 77 82 ve mail adresi bukak@boun.edu.tr dir. Bu kulüp New Hall Binası girişinde bulunmaktadır.",]    ], 
                [        r"(.*\s?(bukomik)|.*\s?(karikatur))",        ["Karikatür ve Mizah Kulübü'nün sitesi http://www.bukomik.boun.edu.tr dir.",]    ],     
                  [        r"(.*\s?(koykoop)|.*\s?(koykoop))",        ["KÖY-KOOP Kulübü'nün sitesi http://www.koykoop.boun.edu.tr, numarası (0212) 359 44 61- 174 ve mail adresi koykoop@boun.edu.tr dir. Bu kulüp 1. Erkek Yurdu altında bulunmaktadır.",]    ], 
                [        r"(.*\s?(bumak)|.*\s?(magara))",        ["Mağara Araştırma Kulübü'nün sitesi http://www.bumak.boun.edu.tr, numarası (0212) 359 44 61- 175 ve mail adresi bumak@boun.edu.tr dir. Bu kulüp 1. Erkek Yurdu altında bulunmaktadır.",]    ],     
                  [        r"(.*\s?(bumatek)|.*\s?(makine))",        ["Makine Teknoloji Kulübü'nün sitesi http://bumatek.boun.edu.tr,  mail adresi bumatek@boun.edu.tr dir. Bu kulüp 1. Erkek Yurdu altında bulunmaktadır.",]    ], 
                [        r"(.*\s?(enso)|.*\s?(muhendislik))",        ["Mühendislik Kulübü'nün sitesi https://mse.ensoboun.com, numarası (0212) 359 65 73 ve mail adresi enso@boun.edu.tr dir. Bu kulüp 1. Erkek Yurdu altında bulunmaktadır.",]    ],
                [        r"(.*\s?(buds)|.*\s?(munzara))",        ["Münazara Kulübü'nün sitesi http://www.debate.boun.edu.tr, mail adresi buds@boun.edu.tr dir. Bu kulüp 1. Erkek Yurdu altında bulunmaktadır.",]    ],     
              [        r"(.*\s?(bumk)|.*\s?(muzik))",        ["Müzik Kulübü'nün sitesi http://www.bumk.boun.edu.tr, numarası (0212) 359 65 91 ve mail adresi bumk@boun.edu.tr dir. Bu kulüp 1. Erkek Yurdu altında bulunmaktadır.",]    ],
                [        r".*\s?(radyo)",        ["Radyo Kulübü'nün sitesi http://www.radyo.boun.edu.tr, faks numarası (0212) 257 89 00 ve mail adresi radyobogazici@boun.edu.tr dir. Bu kulüp 1. Erkek Yurdu altında bulunmaktadır.",]    ],     
                 [        r".*\s?(satranc)",        ["Satranç Kulübü'nün sitesi http://www.satranc.boun.edu.tr, numarası (0212) 359 44 61- 173 ve mail adresi satranç@boun.edu.tr dir. Bu kulüp 1. Erkek Yurdu altında bulunmaktadır.",]    ],     
                     [        r"(.*\s?(busk)|.*\s?(sinema))",        ["Sinema Kulübü'nün sitesi http://www.sinema.boun.edu.tr, numarası (0212) 359 68 64 ve mail adresi sinema@boun.edu.tr dir. Bu kulüp 1. Erkek Yurdu altında bulunmaktadır.",]    ], 
                [        r"(.*\s?(busuik)|.*\s?(siyasal)|.*\s?(uluslar))",        ["Siyasal Bilimler ve Uluslararası İlişkiler Kulübü'nün sitesi http://www.busuik.boun.edu.tr, mail adresi busuik@boun.edu.tr dir. Bu kulüp New Hall Binası girişinde bulunmaktadır.",]    ],     
                  [        r"(.*\s?(sbk)|.*\s?(sosyal))",        ["Sosyal Bilimler Kulübü'nün sitesi http://www.sbk.boun.edu.tr, numarası (0212) 359 44 61- 174 ve mail adresi sbk@boun.edu.tr dir. Bu kulüp 1. Erkek Yurdu altında bulunmaktadır.",]    ], 
                [        r"(.*\s?(sk)\s|.*\s?(spor))",        ["Spor Kulübü'nün sitesi https://karabatak.cc.boun.edu.tr, numarası (0212) 359 45 62 ve mail adresi sporkurulu@boun.edu.tr dir. Bu kulüp ÖFB altında bulunmaktadır.",]    ],     
                  [        r"(.*\s?(busas)|.*\s?(sualti))",        ["Sualtı Sporları Kulübü'nün sitesi http://www.busas.boun.edu.tr, numarası (0212) 359 44 61- 179ve mail adresi busas@boun.edu.tr dir. Bu kulüp 1. Erkek Yurdu altında bulunmaktadır.",]    ], 
                [        r"(.*\s?(butik)|.*\s?(tarih))",        ["Tarih İncelemeleri Kulübü'nün sitesi http://www.butik.boun.edu.tr,mail adresi butik@boun.edu.tr dir. Bu kulüp New Hall Binası girişinde bulunmaktadır.",]    ],
                [        r"(.*\s?(buo)|.*\s?(tiyatro))",        ["Tiyatro Kulübü'nün sitesi http://buo.boun.edu.tr, numarası (0212) 359 64 73 ve mail adresi buo@boun.edu.tr dir. Bu kulüp 1. Erkek Yurdu altında bulunmaktadır.",]    ],   
               [        r"(.*\s?(butmk)|.*\s?(turk))",        ["Türk Müziği Kulübü'nün sitesi http://www.butmk.boun.edu.tr, numarası (0212) 359 68 64 ve mail adresi butmk@boun.edu.tr dir. Bu kulüp 1. Erkek Yurdu altında bulunmaktadır.",]    ],
                [        r"(.*\s?(bunis)|.*\s?(ogrenci))",        ["Uluslararası Öğrenci Ağı Kulübü'nün sitesi http://www.bunis.boun.edu.tr, mail adresi bunis@boun.edu.tr dir. Bu kulüp 1. Erkek Yurdu altında bulunmaktadır.",]    ],     
                 [        r"(.*\s?(buyap)|.*\s?(yapi))",        ["Yapı Kulübü'nün sitesi http://www.buyap.boun.edu.tr, numarası (0212) 359 21 57 ve mail adresi buyap@boun.edu.tr dir. Bu kulüp Mühendislik Fakültesi girişinde bulunmaktadır.",]    ],     
                     [        r"(.*\s?(buyak)|.*\s?(yoneylem))",        ["Yöneylem Araştırma Kulübü'nün sitesi http://www.buyak.boun.edu.tr, numarası (0212) 359 73 09 ve mail adresi buyak@boun.edu.tr dir. Bu kulüp Mühendislik Fakültesi girişinde bulunmaktadır.",]    ], 
]

#CLUBS FUNCTION
def clubs(str):
   fg = [(re.compile(x, re.IGNORECASE),y) for (x,y) in chat_clubs]
   for (pattern, response) in fg:
     match = pattern.match(str)
     if match:
       resp = response[0]
      # if resp[-2:] == '?.': resp = resp[:-2] + '.'
       #if resp[-2:] == '??': resp = resp[:-2] + '?'
       print(resp)

#FUNCTION TEST
#clubs("adk")

#LABEL ANSWER DICTIONARY-ANSWER MATCH
def label_Match (entity_value):
  label_dictionary = {
      "ötk" : "Öğrenci Temsilciliği Kurulu. ÖTK üyeleri her yıl Aralık ayında seçilir ve 1 yıl görev yapar. Öğrenci talep ve tepkilerini yönetime iletme sorumluluğundadır.",
      "buddy" : "Buddy, Boğaziçi Üniversitesi öğrencileri ve mezunları için oluşturulmuş Facebook grubudur.",
      "öfb" : "Öğrenci Faaliyetleri Binası. Orta kantin, spor salonu, ve tiyatro salonu bulunduran binadır.",
      "consent" : "Öğrenciler, kontenjan dışından ya da bölüm dışından ders almak için sistem üzerinden hocalardan consent almak zorundadır, bu, dersi alabilir onayıdır.",
      "others" : "Buddy'de sık sık karşılaşacağınız bu kelime, Facebook'ta ekli olmayan kişiler size mesaj attığında mesajın düştüğü yerin adıdır.",
      "shuttle" : "Shuttle kampüsler arası ulaşım için verilen ücretsiz taşıma hizmetidir, genellikle shuttlelar minibüstür. Shuttle saatleri şu an güncellenmektedir ancak normal şartlarda registration giriş bilgilerinizle şu adresten takip edebilirsiniz: https://mekik.boun.edu.tr/",
      "bükoop" : "Boğaziçi Mezunları Tüketim Kooperatifi. Türkiye'nin tarım üretiminden uzaklaşmasıyla oluşmuş bir topluluktur, doğa dostu tarım yapar.",
      "manzara" : "Manzara, Güney Erkek yurdunun arkasında yer alan bankların olduğu yere verilen isimdir. Meydana indikten sonra shuttle'ın karşısında yer alan binaların altına indiğinizde bulabilirsiniz.",
      "petekler" : "Petekler, Güney kampüse inerken yokuşun sağında kalan arı peteklerine benzeyen oturma alanıdır.",
      "audio visual" : "Kütüphanenin alt katında yer alır, merdivenlerden indiğinizde bulabilirsiniz. Film izleyip müzik dinleyebilirsiniz. Hazırlık öğrencileri RK saatini kaçırdıysa genelde burada sabahlar."
  }
  label_answer = label_dictionary[f"{entity_value}"]
  return label_answer

#LABEL ANSWER CFG GENERATION
def label_CFG():
  loc_grammar = nltk.CFG.formstring("""
  TP -> NP VP
  NP -> Adj N
  VP -> NP V
  Adj -> Bu | Şu | O | Sorduğunuz | Aradığınız
  N -> şey | bilgi | öge | bölge
  V -> şu şekilde: | bu anlama geliyor: | kısaca şöyle:
  """)
  for sentence in generate(loc_grammar, n=1):
    return sentence

#LABEL ANSWER MAIN FUNCTION
def label_Answer(entity_value):
  answer = []
  answer = answer.append(label_Match(entity_value))
  answer = answer.append(label_CFG) 
  return answer

#MAIN
user_input = input("Selam! \n>") #takes user input
classified_intent = pull_Intent(user_input)[0]
entity_value = pull_Intent(user_input)[1]
if classified_intent == "askLocation":
  loc_Answer(user_input)
elif classified_intent == "askInfo":
  info_Answer(user_input) 
elif classified_intent == "askclub":
  clubs(user_input) 
elif classified_intent == "askLabel":
  label_Answer(entity_value)
elif classified_intent == "endConversation":
  print("elveda!")   
else:
  print("ne dediğini anlayamadım :(")   

while classified_intent != "endConversation":
  user_input = input(">") #takes user input
  classified_intent = pull_Intent(user_input)[0]
  entity_value = pull_Intent(user_input)[1]
  #if classified_intent == "welcome":
  #print("Selamlar!")
  if classified_intent == "askLocation":
    loc_Answer(user_input)
  elif classified_intent == "askInfo":
    info_Answer(user_input) 
  elif classified_intent == "askclub":
    clubs(user_input) 
  elif classified_intent == "askLabel":
    label_Answer(entity_value)
  elif classified_intent == "endConversation":
    print("elveda!")   
  else:
    print("ne dediğini anlayamadım :(") 

        

#while ("bye" != user_input):
# pull_Intent(user_input)

def bounbott():
  user_input = input("selam!\n>") #takes user input
  classified_intent = pull_Intent(user_input)[0]
  entity_value = pull_Intent(user_input)[1]

  while classified_intent != "endConversation":
    user_input = input(">") #takes user input
    classified_intent = pull_Intent(user_input)[0]
    entity_value = pull_Intent(user_input)[1]
    #if classified_intent == "welcome":
    #print("Selamlar!")
    if classified_intent == "askLocation":
      loc_Answer(user_input)
    elif classified_intent == "askInfo":
      info_Answer(user_input) 
    elif classified_intent == "askclub":
      clubs(user_input) 
    elif classified_intent == "askLabel":
      label_Answer(entity_value)
    elif classified_intent == "endConversation":
      print("elveda!")   
    else:
      print("ne dediğini anlayamadım :(")

bounbott()

#MAIN
def bounbot():
   
   
    user_input = input(">") #takes user input
    classified_intent = pull_Intent(user_input)[0]
    entity_value = pull_Intent(user_input)[1]
    #if classified_intent == "welcome":
    #print("Selamlar!")
  while classified_intent != "endConversation":
    if classified_intent == "askLocation":
     loc_Answer(user_input)
    elif classified_intent == "askInfo":
     info_Answer(user_input) 
    elif classified_intent == "askclub":
     clubs(user_input) 
    elif classified_intent == "askLabel":
      label_Answer(entity_value)
    elif classified_intent == "endConversation":
      print("elveda!")   
      break
 
    
          

  #while ("bye" != user_input):
  # pull_Intent(user_input) 

bounbot()

bounbot()